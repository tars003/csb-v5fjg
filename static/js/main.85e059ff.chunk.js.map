{"version":3,"sources":["firebase.js","App.js","index.js"],"names":["firebase","initializeApp","authDomain","databaseURL","projectId","database","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","formControl","margin","minWidth","selectEmpty","marginTop","App","classes","useState","cameras","setCameras","downCnt","setDownCnt","stations","setStations","station","setStation","lastRead","setLastRead","nvrDown","setNvrDown","handleStationChange","e","target","value","useEffect","ref","once","snapshot","Object","keys","val","console","log","lastReadRef","on","data","nvrDownRef","camerasRef","down","map","camera","status","length","className","FormControl","InputLabel","id","Select","labelId","onChange","MenuItem","CircularProgress","style","Grid","container","item","xs","Paper","backgroundColor","height","paddingTop","fontSize","position","top","time","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.85e059ff.chunk.js","sourcesContent":["import { firebase } from \"@firebase/app\";\r\nimport \"firebase/database\";\r\n\r\nlet config = {\r\n  authDomain: \"camera-health-66ccb.firebaseapp.com\",\r\n  databaseURL: \"https://camera-health-66ccb-default-rtdb.firebaseio.com\",\r\n  projectId: \"camera-health-66ccb\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase.database();\r\n","import \"./styles.css\";\nimport React, { useEffect, useState } from \"react\";\nimport firebase from \"./firebase\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport moment from \"moment\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: \"theme.palette.text.secondary\"\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nexport default function App() {\n  const classes = useStyles();\n\n  const [cameras, setCameras] = useState([]);\n  const [downCnt, setDownCnt] = useState(0);\n  const [stations, setStations] = useState([]);\n  const [station, setStation] = useState(\"\");\n  const [lastRead, setLastRead] = useState(\"\");\n  const [nvrDown, setNvrDown] = useState(false);\n\n  const handleStationChange = (e) => {\n    setStation(e.target.value);\n  };\n\n  useEffect(() => {\n    const stationsRef = firebase.ref(\"stations\");\n    stationsRef.once(\"value\", (snapshot) => {\n      setStations(Object.keys(snapshot.val()));\n      setStation(Object.keys(snapshot.val())[0]);\n    });\n  }, []);\n\n  useEffect(() => {\n    console.log(\"inside 2nd useEffect\");\n    console.log(stations);\n    console.log(station);\n    if (station != \"\") {\n      // READING lastRead\n      const lastReadRef = firebase.ref(`stations/${station}/lastRead`);\n      lastReadRef.once(\"value\", (snapshot) => {\n        setLastRead(snapshot.val());\n      });\n      // LISTENER FOR LAST READ CHANGE\n      lastReadRef.on(\"value\", (data) => {\n        console.log(data.val());\n        setLastRead(data.val());\n      });\n      // READING IS NVR DOWN\n      const nvrDownRef = firebase.ref(`stations/${station}/nvrDown`);\n      nvrDownRef.once(\"value\", (snapshot) => {\n        setNvrDown(snapshot.val());\n      });\n      // LISTENER FOR nvrDown CHNAGE\n      nvrDownRef.on(\"value\", (data) => {\n        console.log(data.val());\n        setNvrDown(data.val());\n      });\n\n      // READING CAMERAS LIST\n      const camerasRef = firebase.ref(`stations/${station}/cameras`);\n      camerasRef.once(\"value\", (snapshot) => {\n        let cameras = snapshot.val();\n        console.log(cameras);\n        setCameras(cameras);\n        let down = 0;\n        Object.keys(cameras).map((camera) => {\n          if (cameras[camera].status === \"DOWN\") down += 1;\n          return;\n        });\n        setDownCnt(down);\n      });\n      // LISTENER FOR CAMERA ARRAY CHANGE\n      camerasRef.on(\"value\", function (data) {\n        // console.log(data.key);\n        let cameras = data.val();\n        // console.log(cameras);\n        setCameras(cameras);\n        let down = 0;\n        Object.keys(cameras).map((camera) => {\n          if (cameras[camera].status === \"DOWN\") down += 1;\n          return;\n        });\n        setDownCnt(down);\n      });\n    }\n  }, [station]);\n\n  if (Object.keys(cameras).length === 0) {\n    return (\n      <div className=\"App\">\n        <h1>CAMERA HEALTH</h1>\n        <FormControl className={classes.formControl}>\n          <InputLabel id=\"demo-simple-select-label\">Station</InputLabel>\n          <Select\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={station}\n            onChange={handleStationChange}\n          >\n            {stations.map((station) => {\n              // console.log(station);\n              return <MenuItem value={station}>{station}</MenuItem>;\n            })}\n          </Select>\n        </FormControl>\n        <CircularProgress />\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"App\">\n        <h1>CAMERA HEALTH</h1>\n\n        <FormControl className={classes.formControl}>\n          <InputLabel id=\"demo-simple-select-label\">Station</InputLabel>\n          <Select\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={station}\n            onChange={handleStationChange}\n          >\n            {stations.map((station) => {\n              return <MenuItem value={station}>{station}</MenuItem>;\n            })}\n          </Select>\n        </FormControl>\n\n        <h2>\n          {\" \"}\n          Total Cam : {Object.keys(cameras).length}, Down Cam : {downCnt}{\" \"}\n        </h2>\n        {nvrDown ? (\n          <h2 style={{ color: \"red\" }}> NVR is Down</h2>\n        ) : (\n          <h2 style={{ color: \"green\" }}> NVR is UP</h2>\n        )}\n        <h3> Last Updated Time : {lastRead}</h3>\n        <div>\n          <Grid container spacing={3}>\n            {Object.keys(cameras).map((camera) => {\n              // console.log(camera);\n              return (\n                <Grid item xs={3}>\n                  <Paper\n                    style={{\n                      color: \"white\",\n                      backgroundColor:\n                        cameras[camera].status === \"UP\" ? \"green\" : \"red\",\n                      height: \"44px\",\n                      paddingTop: \"29px\",\n                      fontSize: \"20px\"\n                    }}\n                    className={classes.paper}\n                  >\n                    {camera}\n                    <p\n                      style={{\n                        fontSize: \"16px\",\n                        position: \"realtive\",\n                        top: \"-15px\"\n                      }}\n                    >\n                      {cameras[camera].time ? cameras[camera].time : \"\"}\n                    </p>\n                  </Paper>\n                </Grid>\n              );\n            })}\n          </Grid>\n        </div>\n      </div>\n    );\n  }\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}